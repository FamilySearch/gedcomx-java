[#ftl]
[#--macro for writing a namespace page--]
[#-- @ftlvariable name="schema" type="org.codehaus.enunciate.config.SchemaInfo" --]
[#import "boilerplate.fmt" as libBoilerplate/]
[#macro writeXmlMediaTypePage mt]
  [@libBoilerplate.writeStartBody label=(mt.name + " XML")/]
  [@libBoilerplate.writeHeader/]
  <div class="container">
    <ol class="breadcrumb">
      <li><a href="Home.html">Home</a></li>
      <li class="dropdown">
        <a class="dropdown-toggle" data-toggle="dropdown" href="data-formats.html">Data Formats <span class="caret"></span></a>
        <ul class="dropdown-menu">
          <li><a href="data-formats.html">Data Formats</a></li>
          <li><a href="recipes.html">Recipes</a></li>
        </ul>
      </li>
      <li class="active dropdown">
        <a class="dropdown-toggle" data-toggle="dropdown" href="#">${mt.name} XML <span class="caret"></span></a>
        <ul class="dropdown-menu">
    [#list mediaTypeDeclarations as mt]
      [#if mt.xmlMediaType??]
          <li><a href="${baseProjectUri(sch)}mt_${mt.id}_xml.html">${mt.name} XML</a></li>
      [/#if]
      [#if mt.jsonMediaType??]
          <li><a href="${baseProjectUri(sch)}mt_${mt.id}_json.html">${mt.name} JSON</a></li>
      [/#if]
    [/#list]
        </ul>
      </li>
    </ol>

    <div class="page-header">
      <h1>${mt.name} XML</h1>
    </div>

    <div class="table-responsive">
    <table class="table">
    <thead>
      <tr>
        <th>identifier</th>
        <th>root element</th>
    [#if mt.version??]
        <th>version</th>
    [/#if]
        <th>xml schema</th>
      </tr>
    </thead>
    <tbody>
    <tr>
      <td>${mt.xmlMediaType}</td>
      <td><a href="${ns2prefix[mt.rootElement.namespace]}_el_${mt.rootElement.name}_xml.html">${mt.rootElement.name}</a></td>
    [#if mt.version??]
      <td>${mt.version}</td>
    [/#if]
      <td><a href="${ns2schema[mt.rootElement.namespace].properties.filename!"#"}">${ns2schema[mt.rootElement.namespace].properties.filename!"n/a"}</a></td>
    </tr>
    </tbody>
    </table>
    </div>

    ${mt.rootElement.docValue!""}

    <h3>Example</h3>
    <pre class="prettyprint lang-xml">
${generateExampleXml(mt.rootElement)?html}
    </pre>

    <h3>Data Types</h3>
    <div class="container">
    [#assign chunk_size=((mt.dataTypes?size)/3)/]
    <div class="row">
    [#list mt.dataTypes?chunk(chunk_size) as chunk]
      <div class="col-md-4">
      <ul class="list-unstyled">
      [#list chunk as type]
        <li><a href="${ns2prefix[type.namespace]}_${type.name}_xml.html">${type.name}</a></li>
      [/#list]
      </ul>
      </div>
    [/#list]
    </div>
    </div>

    [#assign elementList=mt.elements/]
    [#if elementList?size > 0]
    <h3>Extension Elements</h3>
      
    <p>The ${mt.name} XML data format defines the following elements that may be used as extension elements:</p>
      
    <div class="table-responsive">
    <table class="table table-striped">
    <thead>
    <tr>
      <th>name</th>
      <th>namespace</th>
      <th>type</th>
      <th>description</th>
    </tr>
    </thead>
    <tbody>
      [#list elementList as element]
      <tr>
        <td>${element.name}</td>
        <td>${element.namespace}</td>
        [#if element.typeDefinition??]
          [#assign typeQName=element.typeDefinition.qname/]
        [#else]
          [#assign typeQName=element.elementXmlType.qname/]
        [/#if]
        [#if ns2schema[typeQName.namespaceURI]??]
        <td><a href="${baseProjectUri(typeQName.namespaceURI)}${ns2schema[typeQName.namespaceURI].id}_${typeQName.localPart}_xml.html">${typeQName.namespaceURI}${typeQName.localPart}</a></td>
        [#else]
        <td>${typeQName.localPart?lower_case}</td>
        [/#if]
        <td>${element.docValue!""}</td>
      </tr>
      [/#list]
    </tbody>
    </table>
    </div>

    [/#if]

    [@libBoilerplate.writeFooter/]
  </div> <!--! end of #container -->
  [@libBoilerplate.writeEndBody/]
[/#macro]
[#macro writeJsonMediaTypePage mt]
  [@libBoilerplate.writeStartBody label=(mt.name + " JSON")/]
  [@libBoilerplate.writeHeader/]
    <div class="container">
    <ol class="breadcrumb">
      <li><a href="Home.html">Home</a></li>
      <li class="dropdown">
        <a class="dropdown-toggle" data-toggle="dropdown" href="data-formats.html">Data Formats <span class="caret"></span></a>
        <ul class="dropdown-menu">
          <li><a href="data-formats.html">Data Formats</a></li>
          <li><a href="recipes.html">Recipes</a></li>
        </ul>
      </li>
      <li class="active dropdown">
        <a class="dropdown-toggle" data-toggle="dropdown" href="#">${mt.name} JSON <span class="caret"></span></a>
        <ul class="dropdown-menu">
      [#list mediaTypeDeclarations as mt]
        [#if mt.xmlMediaType??]
          <li><a href="${baseProjectUri(sch)}mt_${mt.id}_xml.html">${mt.name} XML</a></li>
        [/#if]
        [#if mt.jsonMediaType??]
          <li><a href="${baseProjectUri(sch)}mt_${mt.id}_json.html">${mt.name} JSON</a></li>
        [/#if]
      [/#list]
          </ul>
        </li>
      </ol>

    <div class="page-header">
      <h1>${mt.name} JSON</h1>
    </div>

    <div class="table-responsive">
    <table class="table">
    <thead>
      <tr>
        <th>identifier</th>
        <th>root element</th>
    [#if mt.version??]
        <th>version</th>
    [/#if]
      </tr>
    </thead>
    <tbody>
    <tr>
      <td>${mt.xmlMediaType}</td>
      <td><a href="${ns2prefix[mt.rootElement.namespace]}_el_${mt.rootElement.name}_json.html">${mt.rootElement.name}</a></td>
    [#if mt.version??]
      <td>${mt.version}</td>
    [/#if]
    </tr>
    </tbody>
    </table>
    </div>

    ${mt.rootElement.docValue!""}

    <h3>Example</h3>
    <pre class="prettyprint lang-json">
${generateExampleJson(mt.rootElement)?html}
    </pre>

    <h3>Data Types</h3>
    <div class="container">
    [#assign chunk_size=((mt.dataTypes?size)/3)/]
    <div class="row">
    [#list mt.dataTypes?chunk(chunk_size) as chunk]
    <div class="col-md-4">
    <ul class="list-unstyled">
      [#list chunk as type]
        <li><a href="${ns2prefix[type.namespace]}_${type.name}_json.html">${type.name}</a></li>
      [/#list]
    </ul>
    </div>
    [/#list]
    </div>
    </div>

      [#assign elementList=mt.elements/]
      [#if elementList?size > 0]
      <h3>Extension Elements</h3>

      <p>The ${mt.name} JSON data format defines the following elements that may be used as extension elements:</p>

    <div class="table-responsive">
    <table class="table table-striped">
      <thead>
      <tr>
        <th>member name</th>
        <th>type</th>
        <th>description</th>
      </tr>
      </thead>
      <tbody>
      [#list elementList as element]
      <tr>
        <td>${jsonExtensionElementName(element)}</td>
        [#if element.typeDefinition??]
          [#assign typeQName=element.typeDefinition.qname/]
        [#else]
          [#assign typeQName=element.elementXmlType.qname/]
        [/#if]
        [#if ns2schema[typeQName.namespaceURI]??]
        <td><a href="${baseProjectUri(typeQName.namespaceURI)}${ns2schema[typeQName.namespaceURI].id}_${typeQName.localPart}_json.html">${typeQName.namespaceURI}${typeQName.localPart}</a></td>
        [#else]
        <td>${typeQName.localPart?lower_case}</td>
        [/#if]
        <td>${element.docValue!""}</td>
      </tr>
        [/#list]
      </tbody>
      </table>

      [/#if]

    [@libBoilerplate.writeFooter/]
  </div> <!--! end of #container -->
  [@libBoilerplate.writeEndBody/]
[/#macro]
