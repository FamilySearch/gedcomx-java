[#ftl]
[#--macro for writing a element page--]
[#import "boilerplate.fmt" as libBoilerplate/]
[#macro writeXmlElementPage element]
  [#assign schema=schemaForNamespace(element) /]
  [#assign elementLabel=element.name?cap_first + " Element"/]
  [@libBoilerplate.writeStartBody label=elementLabel/]
  [@libBoilerplate.writeHeader/]
  <div class="container">
    <ol class="breadcrumb">
      <li><a href="Home.html">Home</a></li>
      <li><a href="data-formats.html">Data Formats</a></li>
      [#if schema.properties.mediaType??]
      <li class="dropdown">
        <a class="dropdown-toggle" data-toggle="dropdown" href="mt_${schema.properties.mediaType.id}_xml.html">${schema.properties.mediaType.name} XML <span class="caret"></span></a>
        <ul class="dropdown-menu">
        [#list mediaTypeDeclarations as mt]
          [#if mt.xmlMediaType??]
          <li><a href="${baseProjectUri(sch)}mt_${mt.id}_xml.html">${mt.name} XML</a></li>
          [/#if]
          [#if mt.jsonMediaType??]
          <li><a href="${baseProjectUri(sch)}mt_${mt.id}_json.html">${mt.name} JSON</a></li>
          [/#if]
        [/#list]
        </ul>
      </li>
      [/#if]
      <li class="active dropdown">
        <a class="dropdown-toggle" data-toggle="dropdown" href="#">${elementLabel} <span class="caret"></span></a>
        <ul class="dropdown-menu">
      [#assign elementList=schema.globalElements/]
      [#if schema.properties.mediaType??]
        [#assign elementList=schema.properties.mediaType.elements/]
      [/#if]
      [#list elementList as el]
          <li><a href="${schema.id}_el_${el.name}_xml.html">${el.name?cap_first} Element</a></li>
      [/#list]
        </ul>
      </li>
    </ol>

    <div class="page-header">
      <h1>${elementLabel}</h1>
    </div>

    <div class="table-responsive">
    <table class="table">
      <thead>
      <tr>
        <th>data type</th>
        <th>name</th>
        <th>namespace</th>
      </tr>
      </thead>
      <tbody>
      <tr>
        <td><a class="btn btn-info" href="${baseProjectUri(element.typeDefinition)}${schemaForNamespace(element.typeDefinition).id}_${element.typeDefinition.name}_xml.html">${element.typeDefinition.namespace}${element.typeDefinition.name}</a></td>
        <td>${element.name}</td>
        <td>${element.namespace}</td>
      </tr>
      </tbody>
    </table>
    </div>

    <h3>Description</h3>

    <p>${element.docValue!""}</p>

    <h3>Example</h3>

    <pre class="prettyprint lang-xml">
${generateExampleXml(element)?html}
    </pre>

  [@libBoilerplate.writeFooter/]
  </div> <!--! end of #container -->
  [@libBoilerplate.writeEndBody/]
[/#macro]
[#macro writeJsonElementPage element]
  [#assign schema=schemaForNamespace(element) /]
  [#assign elementLabel=element.name?cap_first + " Element"/]
  [@libBoilerplate.writeStartBody label=elementLabel/]
  [@libBoilerplate.writeHeader/]
  <div class="container">
    <ol class="breadcrumb">
      <li><a href="data-formats.html">Data Formats</a></li>
      [#if schema.properties.mediaType??]
      <li class="dropdown">
        <a class="dropdown-toggle" data-toggle="dropdown" href="mt_${schema.properties.mediaType.id}_json.html">${schema.properties.mediaType.name} JSON <span class="caret"></span></a>
        <ul class="dropdown-menu">
        [#list mediaTypeDeclarations as mt]
          [#if mt.xmlMediaType??]
          <li><a href="${baseProjectUri(sch)}mt_${mt.id}_xml.html">${mt.name} XML</a></li>
          [/#if]
          [#if mt.jsonMediaType??]
          <li><a href="${baseProjectUri(sch)}mt_${mt.id}_json.html">${mt.name} JSON</a></li>
          [/#if]
        [/#list]
        </ul>
      </li>
      [/#if]
      <li class="active dropdown">
        <a class="dropdown-toggle" data-toggle="dropdown" href="#">${elementLabel} <span class="caret"></span></a>
        <ul class="dropdown-menu">
      [#assign elementList=schema.globalElements/]
      [#if schema.properties.mediaType??]
        [#assign elementList=schema.properties.mediaType.elements/]
      [/#if]
      [#list elementList as el]
          <li><a href="${schema.id}_el_${el.name}_json.html">${el.name?cap_first} Element</a></li>
      [/#list]
        </ul>
      </li>
    </ol>

    <div class="page-header">
      <h1>${elementLabel}</h1>
    </div>

    <div class="table-responsive">
    <table class="table">
      <thead>
      <tr>
        <th>data type</th>
        <th>json name</th>
      </tr>
      </thead>
      <tbody>
      <tr>
        <td><a class="btn btn-info" href="${baseProjectUri(element.typeDefinition)}${schemaForNamespace(element.typeDefinition).id}_${element.typeDefinition.name}_json.html">${element.typeDefinition.namespace}${element.typeDefinition.name}</a></td>
        <td>${jsonExtensionElementName(element)}</td>
      </tr>
      </tbody>
    </table>
    </div>

    <h3>Description</h3>

    <p>${element.docValue!""}</p>

    <h3>Example</h3>

    <pre class="prettyprint lang-js">
${generateExampleJson(element)}
    </pre>

    [@libBoilerplate.writeFooter/]
  </div> <!--! end of #container -->
  [@libBoilerplate.writeEndBody/]
[/#macro]